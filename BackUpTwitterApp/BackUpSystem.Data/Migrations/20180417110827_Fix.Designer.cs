// <auto-generated />
using BackUpSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace BackUpSystem.Data.Migrations
{
    [DbContext(typeof(BackUpSystemDbContext))]
    [Migration("20180417110827_Fix")]
    partial class Fix
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BackUpSystem.Data.Models.Tweet", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AuthorId")
                        .IsRequired();

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<string>("Hashtag");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("LikesCount");

                    b.Property<string>("MediaUrl");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<int>("RetweetCount");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("TwitterAccountId");

                    b.Property<string>("UserMentioned");

                    b.HasKey("Id");

                    b.HasIndex("TwitterAccountId");

                    b.ToTable("Tweets");
                });

            modelBuilder.Entity("BackUpSystem.Data.Models.TwitterAccount", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<int>("FollowersCount");

                    b.Property<int>("FollowingCount");

                    b.Property<string>("ImageUrl");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("JoinedDate");

                    b.Property<int>("LikesCount");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("TweetsCount");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("WebsiteUrl");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("TwitterAccounts");
                });

            modelBuilder.Entity("BackUpSystem.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<int>("RetweetsCount");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserImage");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BackUpSystem.Data.Models.UserTweet", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("TweetId");

                    b.HasKey("UserId", "TweetId");

                    b.HasIndex("TweetId");

                    b.ToTable("UserTweet");
                });

            modelBuilder.Entity("BackUpSystem.Data.Models.UserTwitterAccount", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("TwitterAccountId");

                    b.HasKey("UserId", "TwitterAccountId");

                    b.HasIndex("TwitterAccountId");

                    b.ToTable("UserTwitterAccount");
                });

            modelBuilder.Entity("BackUpSystem.Data.Models.Tweet", b =>
                {
                    b.HasOne("BackUpSystem.Data.Models.TwitterAccount", "TwitterAccount")
                        .WithMany("Tweets")
                        .HasForeignKey("TwitterAccountId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BackUpSystem.Data.Models.UserTweet", b =>
                {
                    b.HasOne("BackUpSystem.Data.Models.Tweet", "Tweet")
                        .WithMany("Users")
                        .HasForeignKey("TweetId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BackUpSystem.Data.Models.User", "User")
                        .WithMany("FavoriteTweets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BackUpSystem.Data.Models.UserTwitterAccount", b =>
                {
                    b.HasOne("BackUpSystem.Data.Models.TwitterAccount", "TwitterAccount")
                        .WithMany("Users")
                        .HasForeignKey("TwitterAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BackUpSystem.Data.Models.User", "User")
                        .WithMany("TwitterAccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
